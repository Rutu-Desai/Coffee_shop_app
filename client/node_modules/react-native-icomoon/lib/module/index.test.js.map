{"version":3,"sources":["index.test.tsx"],"names":["React","View","render","cleanup","Iconmoon","iconList","iconSetExample","jest","mock","reactNativeSvg","genMockFromModule","IconMock","props","beforeEach","test","getByTestId","svgIcon","children","expect","name","toBe","size","color","JSON","stringify","iconSet","toMatch","spyConsoleError","spyOn","console","mockImplementation","toHaveBeenCalled","result","toEqual"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,MAAT,EAAiBC,OAAjB,QAAgC,+BAAhC;AACA,OAAOC,QAAP,IAAmBC,QAAnB,QAAmC,SAAnC;AAEA,OAAOC,cAAP,MAA2B,gBAA3B;AAEAC,IAAI,CAACC,IAAL,CAAU,kBAAV,EAA8B,MAAM;AAClC,QAAMC,cAAc,GAAGF,IAAI,CAACG,iBAAL,CAAuB,kBAAvB,CAAvB;AACA,SAAOD,cAAP;AACD,CAHD;;AAKA,MAAME,QAAQ,GAAIC,KAAD,iBACf,oBAAC,IAAD;AAAM,EAAA,MAAM,EAAC;AAAb,gBACE,oBAAC,QAAD,EAAcA,KAAd,CADF,CADF;;AAMAC,UAAU,CAACV,OAAD,CAAV;AAEAW,IAAI,CAAC,yBAAD,EAA4B,MAAM;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAkBb,MAAM,eAC5B,oBAAC,QAAD;AACE,IAAA,OAAO,EAAEI,cADX;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,KAAK,EAAC;AAJR,IAD4B,CAA9B;AASA,QAAMU,OAAO,GAAGD,WAAW,CAAC,MAAD,CAAX,CAAoBH,KAApB,CAA0BK,QAA1C;AAEAC,EAAAA,MAAM,CAACF,OAAO,CAACJ,KAAR,CAAcO,IAAf,CAAN,CAA2BC,IAA3B,CAAgC,SAAhC;AACAF,EAAAA,MAAM,CAACF,OAAO,CAACJ,KAAR,CAAcS,IAAf,CAAN,CAA2BD,IAA3B,CAAgC,EAAhC;AACAF,EAAAA,MAAM,CAACF,OAAO,CAACJ,KAAR,CAAcU,KAAf,CAAN,CAA4BF,IAA5B,CAAiC,QAAjC;AACAF,EAAAA,MAAM,CAACK,IAAI,CAACC,SAAL,CAAeR,OAAO,CAACJ,KAAR,CAAca,OAA7B,CAAD,CAAN,CAA8CC,OAA9C,CACEH,IAAI,CAACC,SAAL,CAAelB,cAAf,CADF;AAGD,CAlBG,CAAJ;AAoBAQ,IAAI,CAAC,wCAAD,EAA2C,MAAM;AACnD,QAAMa,eAAe,GAAGpB,IAAI,CACzBqB,KADqB,CACfC,OADe,EACN,OADM,EAErBC,kBAFqB,CAEF,MAAM,CAAE,CAFN,CAAxB,CADmD,CAKnD;;AACA5B,EAAAA,MAAM,eAAC,oBAAC,QAAD,OAAD,CAAN;AAEAgB,EAAAA,MAAM,CAACS,eAAD,CAAN,CAAwBI,gBAAxB;AACD,CATG,CAAJ;AAWAjB,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9B,QAAMkB,MAAM,GAAG3B,QAAQ,CAACC,cAAD,CAAvB;AACAY,EAAAA,MAAM,CAACc,MAAD,CAAN,CAAeC,OAAf,CAAuB,CAAC,QAAD,EAAW,SAAX,EAAsB,IAAtB,EAA4B,MAA5B,EAAoC,QAApC,EAA8C,OAA9C,CAAvB;AACD,CAHG,CAAJ","sourcesContent":["import React from 'react'\nimport { View } from 'react-native'\nimport { render, cleanup } from '@testing-library/react-native'\nimport Iconmoon, { iconList } from './index'\nimport type { IconMoonProps } from './index'\nimport iconSetExample from './example.json'\n\njest.mock('react-native-svg', () => {\n  const reactNativeSvg = jest.genMockFromModule('react-native-svg')\n  return reactNativeSvg\n})\n\nconst IconMock = (props: IconMoonProps) => (\n  <View testID=\"icon\">\n    <Iconmoon {...props} />\n  </View>\n)\n\nbeforeEach(cleanup)\n\ntest('icon is accepting props', () => {\n  const { getByTestId } = render(\n    <IconMock\n      iconSet={iconSetExample}\n      name=\"firefox\"\n      size={25}\n      color=\"tomato\"\n    />\n  )\n\n  const svgIcon = getByTestId('icon').props.children\n\n  expect(svgIcon.props.name).toBe('firefox')\n  expect(svgIcon.props.size).toBe(25)\n  expect(svgIcon.props.color).toBe('tomato')\n  expect(JSON.stringify(svgIcon.props.iconSet)).toMatch(\n    JSON.stringify(iconSetExample)\n  )\n})\n\ntest('icon throw error for insufficent props', () => {\n  const spyConsoleError = jest\n    .spyOn(console, 'error')\n    .mockImplementation(() => {})\n\n  //@ts-ignore\n  render(<IconMock />)\n\n  expect(spyConsoleError).toHaveBeenCalled()\n})\n\ntest('iconList function', () => {\n  const result = iconList(iconSetExample)\n  expect(result).toEqual(['chrome', 'firefox', 'IE', 'edge', 'safari', 'opera'])\n})\n"]}