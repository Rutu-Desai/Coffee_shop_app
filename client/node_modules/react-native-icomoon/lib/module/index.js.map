{"version":3,"sources":["index.tsx"],"names":["React","useMemo","Svg","Path","IconMoon","iconSet","size","color","name","offset","strokeWidth","console","error","viewBoxMax","localOffset","offsetedViewBox","currentIcon","icons","map","i","properties","paths","icon","find","undefined","p","String","iconList","Array","isArray"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B,C,CACA;;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,kBAA1B;;AAoBA,MAAMC,QAAiC,GAAG,CAAC;AACzCC,EAAAA,OADyC;AAEzCC,EAAAA,IAAI,GAAG,EAFkC;AAGzCC,EAAAA,KAAK,GAAG,MAHiC;AAIzCC,EAAAA,IAJyC;AAKzCC,EAAAA,MAAM,GAAG,CALgC;AAMzCC,EAAAA,WAAW,GAAG;AAN2B,CAAD,KAOpC;AACJ,MAAI,CAACL,OAAD,IAAY,CAACG,IAAjB,EAAuB;AACrBG,IAAAA,OAAO,CAACC,KAAR,CAAc,8CAAd;AACA,WAAO,IAAP;AACD;;AAED,QAAMC,UAAU,GAAG,IAAnB;AACA,QAAMC,WAAW,GAAIL,MAAM,GAAG,CAAV,GAAe,CAACI,UAApC;AACA,QAAME,eAAe,GAAGF,UAAU,GAAGC,WAArC,CARI,CAUJ;;AACA,QAAME,WAAgC,GAAGf,OAAO,CAAC,MAAM;AACrD,WAAOI,OAAO,CAACY,KAAR,CACJC,GADI,CACCC,CAAD,IAAY;AACf,aAAO;AACLX,QAAAA,IAAI,EAAEW,CAAC,CAACC,UAAF,CAAaZ,IADd;AAELa,QAAAA,KAAK,EAAEF,CAAC,CAACG,IAAF,CAAOD;AAFT,OAAP;AAID,KANI,EAOJE,IAPI,CAOEJ,CAAD,IAAgB;AACpB,aAAOA,CAAC,CAACX,IAAF,KAAWA,IAAlB;AACD,KATI,CAAP;AAUD,GAX+C,EAW7C,CAACH,OAAD,EAAUG,IAAV,CAX6C,CAAhD;;AAaA,MAAIQ,WAAW,KAAKQ,SAApB,EAA+B;AAC7Bb,IAAAA,OAAO,CAACC,KAAR,kBAAuBJ,IAAvB;AACA,WAAO,IAAP;AACD;;AAED,QAAMa,KAAK,GAAGL,WAAW,CAACK,KAAZ,CAAkBH,GAAlB,CAAsB,CAACO,CAAD,EAAIN,CAAJ,kBAClC,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEO,MAAM,CAACP,CAAD,CAAjB;AAAsB,IAAA,CAAC,EAAEM,CAAzB;AAA4B,IAAA,WAAW,EAAE,IAAIf,WAA7C;AAA0D,IAAA,MAAM,EAAEH;AAAlE,IADY,CAAd;AAIA,sBACE,oBAAC,GAAD;AACE,IAAA,KAAK,EAAEmB,MAAM,CAACpB,IAAD,CADf;AAEE,IAAA,MAAM,EAAEoB,MAAM,CAACpB,IAAD,CAFhB;AAGE,IAAA,IAAI,EAAEC,KAHR;AAIE,IAAA,OAAO,YAAKO,WAAL,cAAoBA,WAApB,cAAmCC,eAAnC,cAAsDA,eAAtD;AAJT,KAMGM,KANH,CADF;AAUD,CAlDD;;AAoDA,OAAO,SAASM,QAAT,CAAkBtB,OAAlB,EAAoC;AACzC,MAAIA,OAAO,IAAIuB,KAAK,CAACC,OAAN,CAAcxB,OAAO,CAACY,KAAtB,CAAf,EAA6C;AAC3C,WAAOZ,OAAO,CAACY,KAAR,CAAcC,GAAd,CAAmBI,IAAD,IAAUA,IAAI,CAACF,UAAL,CAAgBZ,IAA5C,CAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED,eAAeJ,QAAf","sourcesContent":["import React, { useMemo } from 'react'\n//@ts-ignore\nimport { Svg, Path } from 'react-native-svg'\n\nexport interface IconSet {\n  icons: Array<any>\n}\n\nexport interface IconMoonProps {\n  iconSet: IconSet\n  name: string\n  color?: string\n  size?: number\n  strokeWidth?: number\n  offset?: number // some icon might have different padding, use this to offset it\n}\n\nexport interface IconMap {\n  name: string\n  paths: Array<string>\n}\n\nconst IconMoon: React.FC<IconMoonProps> = ({\n  iconSet,\n  size = 32,\n  color = '#222',\n  name,\n  offset = 0,\n  strokeWidth = 1,\n}) => {\n  if (!iconSet || !name) {\n    console.error('The \"iconSet\" and \"name\" props are required.')\n    return null\n  }\n\n  const viewBoxMax = 1024\n  const localOffset = (offset / 2) * -viewBoxMax\n  const offsetedViewBox = viewBoxMax - localOffset\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const currentIcon: IconMap | undefined = useMemo(() => {\n    return iconSet.icons\n      .map((i: any) => {\n        return {\n          name: i.properties.name,\n          paths: i.icon.paths,\n        } as IconMap\n      })\n      .find((i: IconMap) => {\n        return i.name === name\n      })\n  }, [iconSet, name])\n\n  if (currentIcon === undefined) {\n    console.error(`Icon \"${name}\" not found.`)\n    return null\n  }\n\n  const paths = currentIcon.paths.map((p, i) => (\n    <Path key={String(i)} d={p} strokeWidth={5 * strokeWidth} stroke={color} />\n  ))\n\n  return (\n    <Svg\n      width={String(size)}\n      height={String(size)}\n      fill={color}\n      viewBox={`${localOffset} ${localOffset} ${offsetedViewBox} ${offsetedViewBox}`}\n    >\n      {paths}\n    </Svg>\n  )\n}\n\nexport function iconList(iconSet: IconSet) {\n  if (iconSet && Array.isArray(iconSet.icons)) {\n    return iconSet.icons.map((icon) => icon.properties.name)\n  }\n  return null\n}\n\nexport default IconMoon\n"]}