{"version":3,"sources":["index.test.tsx"],"names":["jest","mock","reactNativeSvg","genMockFromModule","IconMock","props","beforeEach","cleanup","test","getByTestId","iconSetExample","svgIcon","children","expect","name","toBe","size","color","JSON","stringify","iconSet","toMatch","spyConsoleError","spyOn","console","mockImplementation","toHaveBeenCalled","result","toEqual"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAEAA,IAAI,CAACC,IAAL,CAAU,kBAAV,EAA8B,MAAM;AAClC,QAAMC,cAAc,GAAGF,IAAI,CAACG,iBAAL,CAAuB,kBAAvB,CAAvB;AACA,SAAOD,cAAP;AACD,CAHD;;AAKA,MAAME,QAAQ,GAAIC,KAAD,iBACf,6BAAC,iBAAD;AAAM,EAAA,MAAM,EAAC;AAAb,gBACE,6BAAC,cAAD,EAAcA,KAAd,CADF,CADF;;AAMAC,UAAU,CAACC,qBAAD,CAAV;AAEAC,IAAI,CAAC,yBAAD,EAA4B,MAAM;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAkB,wCACtB,6BAAC,QAAD;AACE,IAAA,OAAO,EAAEC,gBADX;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,IAAI,EAAE,EAHR;AAIE,IAAA,KAAK,EAAC;AAJR,IADsB,CAAxB;AASA,QAAMC,OAAO,GAAGF,WAAW,CAAC,MAAD,CAAX,CAAoBJ,KAApB,CAA0BO,QAA1C;AAEAC,EAAAA,MAAM,CAACF,OAAO,CAACN,KAAR,CAAcS,IAAf,CAAN,CAA2BC,IAA3B,CAAgC,SAAhC;AACAF,EAAAA,MAAM,CAACF,OAAO,CAACN,KAAR,CAAcW,IAAf,CAAN,CAA2BD,IAA3B,CAAgC,EAAhC;AACAF,EAAAA,MAAM,CAACF,OAAO,CAACN,KAAR,CAAcY,KAAf,CAAN,CAA4BF,IAA5B,CAAiC,QAAjC;AACAF,EAAAA,MAAM,CAACK,IAAI,CAACC,SAAL,CAAeR,OAAO,CAACN,KAAR,CAAce,OAA7B,CAAD,CAAN,CAA8CC,OAA9C,CACEH,IAAI,CAACC,SAAL,CAAeT,gBAAf,CADF;AAGD,CAlBG,CAAJ;AAoBAF,IAAI,CAAC,wCAAD,EAA2C,MAAM;AACnD,QAAMc,eAAe,GAAGtB,IAAI,CACzBuB,KADqB,CACfC,OADe,EACN,OADM,EAErBC,kBAFqB,CAEF,MAAM,CAAE,CAFN,CAAxB,CADmD,CAKnD;;AACA,0CAAO,6BAAC,QAAD,OAAP;AAEAZ,EAAAA,MAAM,CAACS,eAAD,CAAN,CAAwBI,gBAAxB;AACD,CATG,CAAJ;AAWAlB,IAAI,CAAC,mBAAD,EAAsB,MAAM;AAC9B,QAAMmB,MAAM,GAAG,qBAASjB,gBAAT,CAAf;AACAG,EAAAA,MAAM,CAACc,MAAD,CAAN,CAAeC,OAAf,CAAuB,CAAC,QAAD,EAAW,SAAX,EAAsB,IAAtB,EAA4B,MAA5B,EAAoC,QAApC,EAA8C,OAA9C,CAAvB;AACD,CAHG,CAAJ","sourcesContent":["import React from 'react'\nimport { View } from 'react-native'\nimport { render, cleanup } from '@testing-library/react-native'\nimport Iconmoon, { iconList } from './index'\nimport type { IconMoonProps } from './index'\nimport iconSetExample from './example.json'\n\njest.mock('react-native-svg', () => {\n  const reactNativeSvg = jest.genMockFromModule('react-native-svg')\n  return reactNativeSvg\n})\n\nconst IconMock = (props: IconMoonProps) => (\n  <View testID=\"icon\">\n    <Iconmoon {...props} />\n  </View>\n)\n\nbeforeEach(cleanup)\n\ntest('icon is accepting props', () => {\n  const { getByTestId } = render(\n    <IconMock\n      iconSet={iconSetExample}\n      name=\"firefox\"\n      size={25}\n      color=\"tomato\"\n    />\n  )\n\n  const svgIcon = getByTestId('icon').props.children\n\n  expect(svgIcon.props.name).toBe('firefox')\n  expect(svgIcon.props.size).toBe(25)\n  expect(svgIcon.props.color).toBe('tomato')\n  expect(JSON.stringify(svgIcon.props.iconSet)).toMatch(\n    JSON.stringify(iconSetExample)\n  )\n})\n\ntest('icon throw error for insufficent props', () => {\n  const spyConsoleError = jest\n    .spyOn(console, 'error')\n    .mockImplementation(() => {})\n\n  //@ts-ignore\n  render(<IconMock />)\n\n  expect(spyConsoleError).toHaveBeenCalled()\n})\n\ntest('iconList function', () => {\n  const result = iconList(iconSetExample)\n  expect(result).toEqual(['chrome', 'firefox', 'IE', 'edge', 'safari', 'opera'])\n})\n"]}