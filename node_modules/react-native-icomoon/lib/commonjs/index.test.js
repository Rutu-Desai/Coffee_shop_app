"use strict";

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactNative2 = require("@testing-library/react-native");

var _index = _interopRequireWildcard(require("./index"));

var _example = _interopRequireDefault(require("./example.json"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('react-native-svg', () => {
  const reactNativeSvg = jest.genMockFromModule('react-native-svg');
  return reactNativeSvg;
});

const IconMock = props => /*#__PURE__*/_react.default.createElement(_reactNative.View, {
  testID: "icon"
}, /*#__PURE__*/_react.default.createElement(_index.default, props));

beforeEach(_reactNative2.cleanup);
test('icon is accepting props', () => {
  const {
    getByTestId
  } = (0, _reactNative2.render)( /*#__PURE__*/_react.default.createElement(IconMock, {
    iconSet: _example.default,
    name: "firefox",
    size: 25,
    color: "tomato"
  }));
  const svgIcon = getByTestId('icon').props.children;
  expect(svgIcon.props.name).toBe('firefox');
  expect(svgIcon.props.size).toBe(25);
  expect(svgIcon.props.color).toBe('tomato');
  expect(JSON.stringify(svgIcon.props.iconSet)).toMatch(JSON.stringify(_example.default));
});
test('icon throw error for insufficent props', () => {
  const spyConsoleError = jest.spyOn(console, 'error').mockImplementation(() => {}); //@ts-ignore

  (0, _reactNative2.render)( /*#__PURE__*/_react.default.createElement(IconMock, null));
  expect(spyConsoleError).toHaveBeenCalled();
});
test('iconList function', () => {
  const result = (0, _index.iconList)(_example.default);
  expect(result).toEqual(['chrome', 'firefox', 'IE', 'edge', 'safari', 'opera']);
});
//# sourceMappingURL=index.test.js.map